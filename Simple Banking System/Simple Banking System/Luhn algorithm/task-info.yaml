type: edu
custom_name: stage2
files:
- name: src/banking/Main.java
  visible: true
  text: |-
    package banking;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.hyperskill.hstest.dynamic.DynamicTest;

    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class SimpleBankSystemTest extends StageTest<String> {

        private static final Pattern cardNumberPattern = Pattern.compile("^400000\\d{10}$", Pattern.MULTILINE);
        private static final Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);

        @DynamicTest
        CheckResult test1_checkCardCredentials() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }

            String correctCardNumber = cardNumberMatcher.group();

            output = program.execute("1");
            cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }

            String anotherCardNumber = cardNumberMatcher.group();

            if (anotherCardNumber.equals(correctCardNumber)) {
                return CheckResult.wrong("Your program generates two identical card numbers!");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test2_checkLogInAndLogOut() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return new CheckResult(false, "You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return new CheckResult(false, "You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }
            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + correctPin);

            if (!output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should be signed in after " +
                    "entering the correct card information.");
            }

            output = program.execute("2");

            if (!output.toLowerCase().contains("create")) {
                return new CheckResult(false, "The user should be logged out after choosing 'Log out' option.\n" +
                    "And you should print the menu with 'Create an account' option.");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test3_checkLogInWithWrongPin() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example!");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectPin = correctPin;

            while (correctPin.equals(incorrectPin)) {
                incorrectPin = String.valueOf(1000 + random.nextInt(8999));
            }

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + incorrectPin);

            if (output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should not be signed in after" +
                    " entering incorrect card information.");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test4_checkLogInToNotExistingAccount() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number " +
                    "and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();

            Random random = new Random();

            String correctPin = pinMatcher.group().trim();
            String incorrectCardNumber = correctCardNumber;

            while (correctCardNumber.equals(incorrectCardNumber)) {
                incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
            }

            program.execute("2");
            output = program.execute(incorrectCardNumber + "\n" + correctPin);

            if (output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should not be signed" +
                    " in after entering the information of a non-existing card.");
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test5_checkBalance() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            output = program.execute("1");

            if (!output.contains("0")) {
                return new CheckResult(false, "Expected balance: 0");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test6_checkLuhnAlgorithm() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            boolean isSomeCardFound = false;
            int foundCards = 0;

            while (cardNumberMatcher.find()) {

                foundCards++;

                if (!isSomeCardFound) {
                    isSomeCardFound = true;
                }

                String cardNumber = cardNumberMatcher.group();

                if (!checkLuhnAlgorithm(cardNumber)) {
                    return new CheckResult(false, String.format("The card number %s doesnâ€™t pass the Luhn algorithm.", cardNumber));
                }
            }

            if (!isSomeCardFound) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            if (foundCards != 20) {
                return new CheckResult(false, "Tried to generate 20 cards, but found " + foundCards);
            }

            return CheckResult.correct();
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }
    }
  learner_created: false
- name: src/banking/Account.java
  visible: true
  text: |
    package banking;

    public class Account {

        private final Card card;
        private long balance;

        private Account (){
            this.card = Card.createCard();
            this.balance = 0L;
        }

        public static Account createAccount (){
            return new Account();
        }

        public Card getCard() {
            return card;
        }

        public long getBalance() {
            return balance;
        }

        public void setBalance(long balance) {
            this.balance = balance;
        }
    }
  learner_created: true
- name: src/banking/SystemState.java
  visible: true
  text: |
    package banking;

    public enum SystemState {
        MAIN_MENU,
        IN_ACCOUNT
    }
  learner_created: true
- name: src/banking/BankServices.java
  visible: true
  text: |
    package banking;

    import java.util.ArrayList;
    import java.util.List;

    public class BankServices {

        private  List<Account> createdAccounts;

        private BankServices (){
            init();
        }

        public static BankServices createBankServices () {
            return new BankServices();
        }

        private void init () {
            createdAccounts = new ArrayList<>();
        }

        public Account createAccount (){
            Account account =  Account.createAccount();
            createdAccounts.add(account);
            return account;
        }

        public boolean logIn (String cardNr, String pin) {
            boolean loginGranted = false;
            for (Account account : createdAccounts){
                if (account.getCard().getCardNr().equals(cardNr) && account.getCard().getPin().equals(pin)) {
                    loginGranted = true;
                    break;
                }
            }
            return loginGranted;
        }

        public List<Account> getCreatedAccounts() {
            return createdAccounts;
        }
    }
  learner_created: true
- name: src/banking/CardGenerator.java
  visible: true
  text: |
    package banking;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.concurrent.ThreadLocalRandom;


    public class Card {

        private String cardNr;
        private String pin;



        private final static int BIN = 400000;
        private int accountNumber;
        private List<Integer> issuedAccountNumbers;
        private final static int CHECK_SUM = 5;

        private Card() {
            createCardNumber();
            generatePin();
        }

        public static Card createCard() {
            return new Card();
        }

        private void generatePin(){

            this.pin = String.format("%04d" , (int) ThreadLocalRandom.current().nextLong(0, 9999));
        }

        private void createCardNumber() {
            issuedAccountNumbers = new ArrayList<>();
            StringBuilder cardNr = new StringBuilder();
            generateAccNr();
            cardNr.append(BIN).append(accountNumber).append(CHECK_SUM);
            this.cardNr = cardNr.toString();
        }

        private void generateAccNr() {
            this.accountNumber = (int) ThreadLocalRandom.current().nextLong(100000000, 999999999);
            if (isUnique()) {
                issuedAccountNumbers.add(accountNumber);
            } else {
                generateAccNr();
            }
        }

        private boolean isUnique() {
            return !issuedAccountNumbers.contains(accountNumber);
        }

        public String getPin() {
            return pin;
        }

        public String getCardNr() {
            return cardNr;
        }
    }
  learner_created: true
- name: src/banking/Card.java
  visible: true
  learner_created: true
- name: src/banking/DatabaseConnector.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/93/stages/516/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Wed, 06 Oct 2021 09:11:56 UTC
record: 2
